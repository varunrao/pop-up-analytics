Description: >
  This template will deploy an EMR cluster and the necessary security groups. A bastion instance will also be
  provisioned to allow SSH access. A Sagemaker notebook instance will also be configured with access to EMR.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  KeyName:
    Description: SSH key (for access to bastion and EMR instances)
    Type: AWS::EC2::KeyPair::KeyName
    Default: qwiklabskey

  Vpc:
    Description: VPC Id
    Type: String
    Default: ''

  PublicSubnet:
    Description: Public Subnet ID for Bastion instance
    Type: String
    Default: ''

  S3Bucket:
      Description: S3 bucket where the Cloudformation/Scripts/config files are placed
      Type: String
      Default: sparkml-sagemaker-workshop

  S3OutputBucket:
        Description: S3 output bucket created using cloudformation
        Type: String

  NotebookInstanceType:
        Description: Notebook instance type
        Type: String
        Default: ml.m4.2xlarge

Conditions:
  VPCParamExists: !Not [ !Equals [!Ref Vpc, '']]
  PublicSubnetParamExists: !Not [ !Equals [!Ref PublicSubnet, '']]

Resources:

  EmrCluster:
    Type: "AWS::EMR::Cluster"
    Properties:
      Applications:
        - Name: Presto
        - Name: Spark
        - Name: Hive
        - Name: Livy
      BootstrapActions:
        - Name: Install MLeap as EMR bootstap script
          ScriptBootstrapAction:
            Path: !Sub s3://${S3Bucket}-${AWS::Region}/cloudformation/scripts/emr-bootstrap.sh
      Configurations:
        - Classification: spark
          ConfigurationProperties:
            "maximizeResourceAllocation": "true"
        - Classification: spark-defaults
          ConfigurationProperties:
            "spark.driver.extraClassPath": "/home/hadoop/javalib/*:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/usr/share/aws/emr/emrfs/auxlib/*:/usr/share/aws/emr/security/conf:/usr/share/aws/emr/security/lib/*:/usr/share/aws/hmclient/lib/aws-glue-datacatalog-spark-client.jar:/usr/share/java/Hive-JSON-Serde/hive-openx-serde.jar:/usr/share/aws/sagemaker-spark-sdk/lib/sagemaker-spark-sdk.jar"
        - Classification: hive-site
          ConfigurationProperties:
            "hive.metastore.client.factory.class": "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
        - Classification: presto-connector-hive
          ConfigurationProperties:
            "hive.metastore.glue.datacatalog.enabled": "true"
        - Classification: spark-hive-site
          ConfigurationProperties:
            "hive.metastore.client.factory.class": "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
      EbsRootVolumeSize: 10
      Instances:
#        EmrManagedMasterSecurityGroup: !Ref EmrMasterSecurityGroup
#        EmrManagedSlaveSecurityGroup: !Ref EmrSlaveSecurityGroup
        AdditionalMasterSecurityGroups:
          - !Ref EmrAdditionalSecurityGroup
        AdditionalSlaveSecurityGroups:
          - !Ref EmrAdditionalSecurityGroup
        Ec2KeyName: !Ref KeyName
        Ec2SubnetId: !If [PublicSubnetParamExists, !Ref PublicSubnet, !ImportValue 'SparkSagemaker-PublicSubnet']
        MasterInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
              - VolumeSpecification:
                  SizeInGB: 32
                  VolumeType: gp2
          InstanceCount: 1
          InstanceType: m4.2xlarge
          Market: ON_DEMAND
          Name: Master instance group
        CoreInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
              - VolumeSpecification:
                  SizeInGB: 32
                  VolumeType: gp2
          InstanceCount: 4
          InstanceType: m4.2xlarge
          Market: ON_DEMAND
          Name: Core instance group
      JobFlowRole: !Ref EmrInstanceProfile
      #LogUri: !Join [ '', [ 's3://', !ImportValue 'SparkSagemaker-OutputS3Bucket', '/emrlogs/'  ] ]
      Name: !Sub ${EnvironmentName} EMR Cluster
      ReleaseLabel: emr-5.12.2
      ScaleDownBehavior: TERMINATE_AT_TASK_COMPLETION
      ServiceRole: !Ref EmrServiceRole
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EMR Cluster
      VisibleToAllUsers: true
  UpdateLivy:
    Properties:
      ActionOnFailure: CONTINUE
      HadoopJarStep:
        Args:
        - !Sub s3://${S3Bucket}-${AWS::Region}/cloudformation/scripts/bootstrap-livy.sh
        Jar: s3://${AWS::Region}.elasticmapreduce/libs/script-runner/script-runner.jar
        MainClass: ''
      JobFlowId: !Ref 'EmrCluster'
      Name: UpdateLivy
    Type: AWS::EMR::Step
  EmrIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
        - "arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess"

  EmrServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "elasticmapreduce.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"

  EmrInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EmrIamRole

  SagemakerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Spark-.SagemakerSecurityGroup
      GroupDescription: Security group to control access to Sagemaker
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Sagemaker Security Group
      VpcId: !If [VPCParamExists, !Ref Vpc, !ImportValue 'SparkSagemaker-VPC']

  EmrAdditionalSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: SagemakerSecurityGroup
    Properties:
      GroupName: EmrMasterSecurityGroup
      GroupDescription: Allow SSH and Sagemaker access
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SagemakerSecurityGroup
          Description: Sagemaker
          IpProtocol: tcp
          FromPort: 8998
          ToPort: 8998
        - SourceSecurityGroupId: !Ref SagemakerSecurityGroup
          Description: EMR resource manager
          IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
        - SourceSecurityGroupId: !Ref SagemakerSecurityGroup
          Description: EMR Spark UI Server
          IpProtocol: tcp
          FromPort: 18080
          ToPort: 18080
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EMR Additional Security Group
      VpcId: !If [VPCParamExists, !Ref Vpc, !ImportValue 'SparkSagemaker-VPC']

Outputs:

  EmrMasterNodeDns:
    Description: Public DNS name of the master EMR instance
    Value: !GetAtt EmrCluster.MasterPublicDNS
    Export:
        Name: EmrMasterNodeDns

  SagemakerSecurityGroup:
    Description: IAM role name
    Value: !GetAtt SagemakerSecurityGroup.GroupId
    Export:
      Name: SagemakerSecurityGroup
